(display
    (let f [(n 1) (total-digits 0) (which-digit 1) (prod 1)]
        (cond
            ((> which-digit 1000000) prod)
            ((< n 10)
                (if (>= (+ total-digits 1) which-digit)
                    (let g [(digit-number 1) (test n)]
                        (if (< digit-number 1)
                            (f (+ n 1) (+ total-digits 1) which-digit prod)
                            (if (= (+ total-digits digit-number) which-digit)
                                (f (+ n 1) (+ total-digits 1) (* which-digit 10) (* prod (modulo test 10)))
                                (g (- digit-number 1) (floor (/ test 10))))))
                    (f (+ n 1) (+ total-digits 1) which-digit prod)))
            ((< n 100)
                (if (>= (+ total-digits 2) which-digit)
                    (let g [(digit-number 2) (test n)]
                        (if (< digit-number 1)
                            (f (+ n 1) (+ total-digits 2) which-digit prod)
                            (if (= (+ total-digits digit-number) which-digit)
                                (f (+ n 1) (+ total-digits 2) (* which-digit 10) (* prod (modulo test 10)))
                                (g (- digit-number 1) (floor (/ test 10))))))
                    (f (+ n 1) (+ total-digits 2) which-digit prod)))
            ((< n 1000)
                (if (>= (+ total-digits 3) which-digit)
                    (let g [(digit-number 3) (test n)]
                        (if (< digit-number 1)
                            (f (+ n 1) (+ total-digits 3) which-digit prod)
                            (if (= (+ total-digits digit-number) which-digit)
                                (f (+ n 1) (+ total-digits 3) (* which-digit 10) (* prod (modulo test 10)))
                                (g (- digit-number 1) (floor (/ test 10))))))
                    (f (+ n 1) (+ total-digits 3) which-digit prod)))
            ((< n 10000)
                (if (>= (+ total-digits 4) which-digit)
                    (let g [(digit-number 4) (test n)]
                        (if (< digit-number 1)
                            (f (+ n 1) (+ total-digits 4) which-digit prod)
                            (if (= (+ total-digits digit-number) which-digit)
                                (f (+ n 1) (+ total-digits 4) (* which-digit 10) (* prod (modulo test 10)))
                                (g (- digit-number 1) (floor (/ test 10))))))
                    (f (+ n 1) (+ total-digits 4) which-digit prod)))
            ((< n 100000)
                (if (>= (+ total-digits 5) which-digit)
                    (let g [(digit-number 5) (test n)]
                        (if (< digit-number 1)
                            (f (+ n 1) (+ total-digits 5) which-digit prod)
                            (if (= (+ total-digits digit-number) which-digit)
                                (f (+ n 1) (+ total-digits 5) (* which-digit 10) (* prod (modulo test 10)))
                                (g (- digit-number 1) (floor (/ test 10))))))
                    (f (+ n 1) (+ total-digits 5) which-digit prod)))
            ((< n 1000000)
                (if (>= (+ total-digits 6) which-digit)
                    (let g [(digit-number 6) (test n)]
                        (if (< digit-number 1)
                            (f (+ n 1) (+ total-digits 6) which-digit prod)
                            (if (= (+ total-digits digit-number) which-digit)
                                (f (+ n 1) (+ total-digits 6) (* which-digit 10) (* prod (modulo test 10)))
                                (g (- digit-number 1) (floor (/ test 10))))))
                    (f (+ n 1) (+ total-digits 6) which-digit prod))))))
(display #\newline)
(exit)
